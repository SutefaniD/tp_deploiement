name: CI/CD Pipeline

env:
  AZURE_WEBAPP_NAME: webapi-stephanie   # set this to the name of your Azure Web App
  AZURE_WEBAPP_PACKAGE_PATH: '.'      # set this to the path to your web app project, defaults to the repository root
  DOTNET_VERSION: '8.0'                 # set this to the .NET Core version to use

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Set up dependency caching for faster builds
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Build with dotnet
        run: dotnet build --configuration Release

      - name: dotnet publish
        run: dotnet publish -c Release -o ${{env.DOTNET_ROOT}}/myapp

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: .net-app
          path: ${{env.DOTNET_ROOT}}/myapp


  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'
      - name: Run tests
        run: dotnet test MyWebApi/MyWebApi.csproj --no-build --verbosity normal
    
  

  deploy-as-binary:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    needs: test
    environment:
      name: 'Development'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: .net-app

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_PUBLISH_PROFILE }}
          package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
      
  smoke-test-binary:
    runs-on: ubuntu-latest
    needs: deploy-as-binary
    steps:
      - name: Smoke test (check Hello World)
        run: |
          sleep 15  # On attend quelques secondes pour laisser Azure démarrer l'app
          RESPONSE=$(curl -s https://webapi-stephanie-fuejh7hth3fucudu.spaincentral-01.azurewebsites.net)
          echo "Response: $RESPONSE"

          if [[ "$RESPONSE" == *"Hello World!"* ]]; then
            echo "✅ Déploiement réussi, Hello World trouvé"
          else
            echo "❌ Déploiement échoué, Hello World non trouvé"
            exit 1
          fi

  deploy-as-docker:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/webapi-demo:latest

  smoke-test-docker:
    runs-on: ubuntu-latest
    needs: deploy-as-docker
    steps:
      - name: Smoke test (check Hello World)
        run: |
          sleep 15  # On attend quelques secondes pour laisser Azure démarrer l'app
          RESPONSE=$(curl -s https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net)
          echo "Response: $RESPONSE"

          if [[ "$RESPONSE" == *"Hello World!"* ]]; then
            echo "✅ Déploiement réussi, Hello World trouvé"
          else
            echo "❌ Déploiement échoué, Hello World non trouvé"
            exit 1
          fi
